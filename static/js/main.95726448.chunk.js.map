{"version":3,"sources":["components/Cell/index.js","components/Grid/index.js","utils.js","redux/game.js","components/Game/index.js","redux/index.js","redux/configureStore.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","index","number","onClick","position","top","Math","floor","left","react_default","a","createElement","className","style","defaultProps","Grid","_this$props","this","gameState","onCellClick","map","i","components_Cell","key","Component","isCompleted","getRandomInt","min","max","random","shuffle","Array","currentValue","currentIndex","move","emptyIndex","indexOf","includes","canMove","cloneGameState","Object","toConsumableArray","MOVE","createAction","SHUFFLE","ROLLBACK","gameSelector","state","game","gameHistorySelector","history","gameIsCompletedSelector","typeToReducer","_typeToReducer","defineProperty","_ref","payload","currentGameState","concat","clonedHistory","prevGameState","pop","_ref2","Game","_this","moveGame","nextGameState","onRollbackClick","_this$props2","rollbackGame","gameHistory","length","onShuffleClick","shuffleGame","load","_this$props3","gameIsCompleted","components_Grid","aria-label","role","mapDispatchToProps","connect","combineReducers","logger","createLogger","collapsed","store","createStore","rootReducer","applyMiddleware","save","App","es","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95726448.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.css';\n\nconst Cell = (props) => {\n  const { index, number, onClick } = props;\n\n  const position = { top: Math.floor(index / 4) * 25 + '%', left: index % 4 * 25 + '%' };\n\n  if (number === 16) return (\n    <div className={`Cell empty`} style={position} />\n  );\n\n  return (\n    <div\n      onClick={() => onClick(number, index)}\n      className={`Cell`}\n      style={position}>\n      {number}\n    </div>\n  );\n};\n\nCell.propTypes = {\n  index: PropTypes.number,\n  number: PropTypes.number,\n  onClick: PropTypes.func,\n};\nCell.defaultProps = {\n  onClick: () => false,\n};\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Cell from '../Cell';\n\nimport './styles.css';\n\nclass Grid extends Component {\n\n  render() {\n    const { gameState, onCellClick } = this.props;\n\n    return (\n      <div className={'Grid'}>\n        {gameState.map((i, index) =>\n          <Cell key={index} number={i} index={index} onClick={onCellClick} />)}\n      </div>\n    );\n  }\n}\n\nGrid.propTypes = {\n  gameState: PropTypes.array,\n  onCellClick: PropTypes.func,\n};\nGrid.defaultProps = {};\n\nexport default Grid;\n","export const isCompleted = gameState => {\n  for (let i = 0; i < 15; i++) {\n    if (gameState[i] > gameState[i + 1]) return false;\n  }\n  return true;\n};\n\nexport const createGameState = () => {\n  const gameState = [];\n  for (let i = 0; i < 16; i++) {\n    gameState.push(i + 1);\n  }\n  return gameState;\n};\n\nexport const getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const shuffle = () => {\n  const gameState = new Array(16);\n\n  for (let currentValue = 1; currentValue < 17; currentValue++) {\n    let currentIndex = getRandomInt(0, 15);\n    while (gameState[currentIndex]) currentIndex = getRandomInt(0, 15);\n    gameState[currentIndex] = currentValue;\n  }\n\n  return gameState;\n};\n\nexport const canMove = (gameState, index) => {\n  const emptyIndex = gameState.indexOf(16);\n\n  return [\n    emptyIndex - 4,\n    emptyIndex - 1,\n    emptyIndex + 1,\n    emptyIndex + 4,\n  ].includes(index);\n};\n\nexport const move = (gameState, index) => {\n  const emptyIndex = gameState.indexOf(16);\n\n  if (canMove(gameState, index)) {\n    const cloneGameState = [...gameState]; // copy\n    cloneGameState[emptyIndex] = cloneGameState[index]; // change\n    cloneGameState[index] = 16; // set empty\n\n    return cloneGameState;\n  }\n\n  return null;\n};","/*\n * Game duck.\n * Location: state.game\n */\n\nimport typeToReducer from 'type-to-reducer';\nimport { createAction } from 'redux-actions';\n\nimport { isCompleted } from '../utils';\n\n// Actions\nexport const MOVE = createAction('game/MOVE');\nexport const SHUFFLE = createAction('game/SHUFFLE');\nexport const ROLLBACK = createAction('game/ROLLBACK');\n\n// Action creators\nexport const moveGame = nextGameState => MOVE(nextGameState);\nexport const shuffleGame = gameState => SHUFFLE(gameState);\nexport const rollbackGame = () => ROLLBACK();\n\n// Selectors\nexport const gameSelector = (state) => state.game.state;\nexport const gameHistorySelector = (state) => state.game.history;\nexport const gameIsCompletedSelector = (state) => state.game.isCompleted;\n\n// Reducer\nexport default typeToReducer({\n  [MOVE]: (state, { payload }) => {\n    const currentGameState = state.state;\n\n    return {\n      state: payload,\n      history: [...state.history, currentGameState],\n      isCompleted: isCompleted(payload),\n    };\n  },\n  [ROLLBACK]: state => {\n    const clonedHistory = [...state.history];\n    const prevGameState = clonedHistory.pop();\n\n    return {\n      state: prevGameState,\n      history: clonedHistory,\n      isCompleted: isCompleted(prevGameState),\n    };\n  },\n  [SHUFFLE]: (state, { payload }) => {\n    return {\n      state: payload,\n      history: [],\n      isCompleted: isCompleted(payload),\n    };\n  },\n}, {\n  state: [],\n  history: [],\n  isCompleted: false,\n});\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { load } from 'redux-localstorage-simple';\n\nimport Grid from '../Grid';\nimport { move, shuffle } from '../../utils';\nimport {\n  moveGame,\n  shuffleGame,\n  rollbackGame,\n  gameSelector,\n  gameHistorySelector,\n  gameIsCompletedSelector,\n} from '../../redux/game';\n\nimport './styles.css';\n\nclass Game extends Component {\n  componentDidMount() {\n    const state = load();\n    if (!state || !(state.game && state.game.state))\n      this.onShuffleClick();\n  }\n\n  onCellClick = (number, index) => {\n    const { gameState, moveGame } = this.props;\n\n    const nextGameState = move(gameState, index);\n\n    if (nextGameState)\n      moveGame(nextGameState);\n  };\n\n  onRollbackClick = () => {\n    const { rollbackGame, gameHistory } = this.props;\n\n    if (gameHistory.length > 0)\n      rollbackGame();\n  };\n\n  onShuffleClick = () => {\n    const { shuffleGame } = this.props;\n\n    shuffleGame(shuffle());\n  };\n\n  render() {\n    const { gameState, gameHistory, gameIsCompleted } = this.props;\n\n    return (\n      <div className={'Game'}>\n        <h1>15 PUZZLE</h1>\n        <Grid gameState={gameState} onCellClick={this.onCellClick} />\n        {\n          gameIsCompleted &&\n          <div className={'GameCongratulations'}>\n            Congratulations! You did it! <span aria-label={'Congrats'} role={'img'}>🎉</span>\n          </div>\n        }\n        <div className={'GameActions'}>\n          <button onClick={this.onRollbackClick}>Rollback ({gameHistory.length})</button>\n          <button onClick={this.onShuffleClick}>Shuffle</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  gameState: gameSelector(state),\n  gameHistory: gameHistorySelector(state),\n  gameIsCompleted: gameIsCompletedSelector(state),\n});\n\nconst mapDispatchToProps = {\n  moveGame,\n  shuffleGame,\n  rollbackGame,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","import { combineReducers } from 'redux';\n\nimport game from './game';\n\nexport default combineReducers({\n  game,\n});","import { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { save, load } from 'redux-localstorage-simple';\n\nimport rootReducer from './index';\n\nconst logger = createLogger({ collapsed: true });\n\nexport default function configureStore(initialState) {\n  const store = createStore(\n    rootReducer,\n    load(),\n    applyMiddleware(\n      logger,\n      save(),\n    ),\n  );\n\n  if (module.hot) {\n    module.hot.accept('./index', () => {\n      const nextRootReducer = require('./index');\n      store.replaceReducer(nextRootReducer);\n    });\n  }\n\n  return store;\n}","import React, { Component } from 'react';\nimport Game from './components/Game';\nimport { Provider } from 'react-redux';\nimport configureStore from './redux/configureStore';\n\nconst store = configureStore();\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Provider store={store}>\n          <Game />\n        </Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}